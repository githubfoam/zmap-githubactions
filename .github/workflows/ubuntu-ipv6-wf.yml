name: "zmap IPV6 with ubuntu  CI workflow"


on:
  push:
    branches: [ test ]


jobs:

  zmap-ipv6-1604-ubuntu-latest-job:
    name: "build zmap IPV6 with ubuntu 16.04 on ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "kalilinux" #https://hub.docker.com/r/ubuntu
      version: "latest"
      name: "ubuntu-1604/zmap-ipv6"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.ubuntu.16.04.zmap.ipv6"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch 
    - name: "build zmap IPV6 with ubuntu 16.04 "
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not usedi
        set -xe
        whoami
        echo ${USER} 
        #Add current logged in user to the docker group.
        sudo usermod -aG docker ${USER}
        id  ${USER}
        docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version} 
        docker system df -v               
        docker image inspect ${name}:${version}  
          echo "################## ENTRYPOINT ##################"
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        # the input device is not a TTY
        # docker run  -it --rm --net=host ${name}:${version} -h 
        # docker run ${name}:${version} zmap -h
        docker run --rm --net=host ${name}:${version} zmap -h 
        # List available probe modules
        # IPv6 support
        docker run --rm --net=host ${name}:${version} zmap --list-probe-modules                                         
        # docker run --rm --net=host ${name}:${version} zmap --probe-module=icmp6_echoscan
        # docker run ${name}:${version} zmap -p 80 172.217.0.0/24 -o IPresults.csv # not OK

  zmap-ipv6-1804-ubuntu-latest-job:
    name: "build zmap IPV6 with ubuntu 18.04 on ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "kalilinux" #https://hub.docker.com/r/ubuntu
      version: "latest"
      name: "ubuntu-1804/zmap-ipv6"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.ubuntu.18.04.zmap.ipv6"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch 
    - name: "build zmap IPV6 with ubuntu 18.04 "
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not usedi
        set -xe
        whoami
        echo ${USER} 
        #Add current logged in user to the docker group.
        sudo usermod -aG docker ${USER}
        id  ${USER}
        docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version} 
        docker system df -v               
        docker image inspect ${name}:${version}  
          echo "################## ENTRYPOINT ##################"
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        # the input device is not a TTY
        # docker run  -it --rm --net=host ${name}:${version} -h 
        # docker run ${name}:${version} zmap -h
        docker run --rm --net=host ${name}:${version} zmap -h 
        # List available probe modules
        # IPv6 support
        docker run --rm --net=host ${name}:${version} zmap --list-probe-modules                                         
        # docker run --rm --net=host ${name}:${version} zmap --probe-module=icmp6_echoscan
        # docker run ${name}:${version} zmap -p 80 172.217.0.0/24 -o IPresults.csv # not OK
